// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   Student?
  teacher   Teacher?

  @@map("users")
}

model Student {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  dateOfBirth DateTime
  phone       String?
  address     String?
  enrollmentDate DateTime @default(now())
  status      StudentStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  performances Performance[]
  orders      Order[]

  @@map("students")
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  phone       String?
  department  String
  hireDate    DateTime @default(now())
  status      TeacherStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[]

  @@map("teachers")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  credits     Int
  teacherId   String
  semester    String
  year        Int
  status      CourseStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]

  @@map("courses")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  grade     String?
  status    EnrollmentStatus @default(ENROLLED)
  enrolledAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Performance {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  examType  ExamType
  score     Float
  maxScore  Float
  examDate  DateTime
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("performances")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  isbn        String   @unique
  publisher   String?
  price       Float
  stock       Int      @default(0)
  description String?
  category    String?
  imageUrl    String?
  status      BookStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("books")
}

model Order {
  id        String   @id @default(cuid())
  studentId String
  total     Float
  status    OrderStatus @default(PENDING)
  orderDate DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  items      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  bookId  String
  quantity Int
  price   Float

  // Relations
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book     Book  @relation(fields: [bookId], references: [id])

  @@map("order_items")
}

model Admission {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  dateOfBirth DateTime
  course      String
  status      AdmissionStatus @default(PENDING)
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admissions")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  SUSPENDED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  RETIRED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum EnrollmentStatus {
  ENROLLED
  DROPPED
  COMPLETED
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
  PROJECT
}

enum BookStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
}
