generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  teacher   Teacher?

  @@index([email])
  @@map("users")
}

model Student {
  id             String        @id @default(uuid())
  userId         String        @unique
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  phone          String?
  address        String?
  enrollmentDate DateTime      @default(now())
  status         StudentStatus @default(ACTIVE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  enrollments    Enrollment[]
  orders         Order[]
  performances   Performance[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lastName])
  @@map("students")
}

model Teacher {
  id         String        @id @default(uuid())
  userId     String        @unique
  firstName  String
  lastName   String
  phone      String?
  department String
  hireDate   DateTime      @default(now())
  status     TeacherStatus @default(ACTIVE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  courses    Course[]
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Course {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  description String?
  credits     Int
  teacherId   String
  semester    String
  year        Int
  status      CourseStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]

  @@index([code])
  @@map("courses")
}

model Enrollment {
  id         String           @id @default(uuid())
  studentId  String
  courseId   String
  grade      String?
  status     EnrollmentStatus @default(ENROLLED)
  enrolledAt DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  course     Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Performance {
  id        String   @id @default(uuid())
  studentId String
  courseId  String
  examType  ExamType
  score     Float
  maxScore  Float
  examDate  DateTime
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@map("performances")
}

model Book {
  id          String      @id @default(uuid())
  title       String
  author      String
  isbn        String      @unique
  publisher   String?
  price       Float
  stock       Int         @default(0)
  description String?
  category    String?
  imageUrl    String?
  status      BookStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@index([title])
  @@map("books")
}

model Order {
  id        String      @id @default(uuid())
  studentId String
  total     Float
  status    OrderStatus @default(PENDING)
  orderDate DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int
  price    Float
  book     Book   @relation(fields: [bookId], references: [id])
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Admission {
  id          String          @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  dateOfBirth DateTime
  course      String
  status      AdmissionStatus @default(PENDING)
  message     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([email])
  @@map("admissions")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  SUSPENDED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  RETIRED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum EnrollmentStatus {
  ENROLLED
  DROPPED
  COMPLETED
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
  PROJECT
}

enum BookStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AdmissionStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLISTED
}
